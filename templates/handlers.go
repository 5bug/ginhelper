package templates

const HandlersTpl = `
// Code generated by generator. DO NOT EDIT.
package api

import (
	"net/http"

	"{{.App.Project}}/pkg/rest"
	
	"github.com/gin-gonic/gin"
)

// {{.App.Service}}Service service define
type {{.App.Service}}Service interface {
	Ping() error
{{- range .Requests}}
	{{.Name}}(ctx *rest.Context, request *{{.Name}}Request) (reply *{{.Name}}Reply, err error)
{{- end}}
}

func handlerPing(svc {{.App.Service}}Service) gin.HandlerFunc {
	return func(c *gin.Context) {
		if err := svc.Ping(); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"status": "fail"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"status": "success"})
	}
}

{{range .Requests}}
// {{.Name}} {{.Name}} handler
func handler{{.Name}}(svc {{$.App.Service}}Service) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			err      error
			req      {{.Name}}Request
			reply    interface{}
			httpCode = http.StatusBadRequest
			ctx      = rest.NewContext(c)
		)
		defer rest.HTTPResponse(ctx, &httpCode, &err, &reply)
		if err = rest.Bind(c, &req); err != nil {
			return
		}
		if reply, err = svc.{{.Name}}(ctx, &req); err != nil {
			return
		}
		httpCode = http.StatusOK
	}
}
{{end}}
`
